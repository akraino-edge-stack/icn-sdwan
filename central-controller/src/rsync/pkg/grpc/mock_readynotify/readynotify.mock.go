// Code generated by MockGen. DO NOT EDIT.
// Source: readynotify/readynotify.pb.go

// Package mock_readynotify is a generated GoMock package.
package mock_readynotify

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	readynotify "gitlab.com/project-emco/core/emco-base/src/rsync/pkg/grpc/readynotify"
	context0 "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockReadyNotifyClient is a mock of ReadyNotifyClient interface.
type MockReadyNotifyClient struct {
	ctrl     *gomock.Controller
	recorder *MockReadyNotifyClientMockRecorder
}

// MockReadyNotifyClientMockRecorder is the mock recorder for MockReadyNotifyClient.
type MockReadyNotifyClientMockRecorder struct {
	mock *MockReadyNotifyClient
}

// NewMockReadyNotifyClient creates a new mock instance.
func NewMockReadyNotifyClient(ctrl *gomock.Controller) *MockReadyNotifyClient {
	mock := &MockReadyNotifyClient{ctrl: ctrl}
	mock.recorder = &MockReadyNotifyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadyNotifyClient) EXPECT() *MockReadyNotifyClientMockRecorder {
	return m.recorder
}

// Alert mocks base method.
func (m *MockReadyNotifyClient) Alert(ctx context0.Context, in *readynotify.Topic, opts ...grpc.CallOption) (readynotify.ReadyNotify_AlertClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Alert", varargs...)
	ret0, _ := ret[0].(readynotify.ReadyNotify_AlertClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Alert indicates an expected call of Alert.
func (mr *MockReadyNotifyClientMockRecorder) Alert(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alert", reflect.TypeOf((*MockReadyNotifyClient)(nil).Alert), varargs...)
}

// Unsubscribe mocks base method.
func (m *MockReadyNotifyClient) Unsubscribe(ctx context0.Context, in *readynotify.Topic, opts ...grpc.CallOption) (*readynotify.UnsubscribeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unsubscribe", varargs...)
	ret0, _ := ret[0].(*readynotify.UnsubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockReadyNotifyClientMockRecorder) Unsubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockReadyNotifyClient)(nil).Unsubscribe), varargs...)
}

// MockReadyNotify_AlertClient is a mock of ReadyNotify_AlertClient interface.
type MockReadyNotify_AlertClient struct {
	ctrl     *gomock.Controller
	recorder *MockReadyNotify_AlertClientMockRecorder
}

// MockReadyNotify_AlertClientMockRecorder is the mock recorder for MockReadyNotify_AlertClient.
type MockReadyNotify_AlertClientMockRecorder struct {
	mock *MockReadyNotify_AlertClient
}

// NewMockReadyNotify_AlertClient creates a new mock instance.
func NewMockReadyNotify_AlertClient(ctrl *gomock.Controller) *MockReadyNotify_AlertClient {
	mock := &MockReadyNotify_AlertClient{ctrl: ctrl}
	mock.recorder = &MockReadyNotify_AlertClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadyNotify_AlertClient) EXPECT() *MockReadyNotify_AlertClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockReadyNotify_AlertClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockReadyNotify_AlertClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockReadyNotify_AlertClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockReadyNotify_AlertClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReadyNotify_AlertClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReadyNotify_AlertClient)(nil).Context))
}

// Header mocks base method.
func (m *MockReadyNotify_AlertClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockReadyNotify_AlertClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockReadyNotify_AlertClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockReadyNotify_AlertClient) Recv() (*readynotify.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*readynotify.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockReadyNotify_AlertClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReadyNotify_AlertClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockReadyNotify_AlertClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReadyNotify_AlertClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReadyNotify_AlertClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockReadyNotify_AlertClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReadyNotify_AlertClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReadyNotify_AlertClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockReadyNotify_AlertClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockReadyNotify_AlertClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockReadyNotify_AlertClient)(nil).Trailer))
}

// MockReadyNotifyServer is a mock of ReadyNotifyServer interface.
type MockReadyNotifyServer struct {
	ctrl     *gomock.Controller
	recorder *MockReadyNotifyServerMockRecorder
}

// MockReadyNotifyServerMockRecorder is the mock recorder for MockReadyNotifyServer.
type MockReadyNotifyServerMockRecorder struct {
	mock *MockReadyNotifyServer
}

// NewMockReadyNotifyServer creates a new mock instance.
func NewMockReadyNotifyServer(ctrl *gomock.Controller) *MockReadyNotifyServer {
	mock := &MockReadyNotifyServer{ctrl: ctrl}
	mock.recorder = &MockReadyNotifyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadyNotifyServer) EXPECT() *MockReadyNotifyServerMockRecorder {
	return m.recorder
}

// Alert mocks base method.
func (m *MockReadyNotifyServer) Alert(arg0 *readynotify.Topic, arg1 readynotify.ReadyNotify_AlertServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Alert indicates an expected call of Alert.
func (mr *MockReadyNotifyServerMockRecorder) Alert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alert", reflect.TypeOf((*MockReadyNotifyServer)(nil).Alert), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockReadyNotifyServer) Unsubscribe(arg0 context0.Context, arg1 *readynotify.Topic) (*readynotify.UnsubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1)
	ret0, _ := ret[0].(*readynotify.UnsubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockReadyNotifyServerMockRecorder) Unsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockReadyNotifyServer)(nil).Unsubscribe), arg0, arg1)
}

// MockReadyNotify_AlertServer is a mock of ReadyNotify_AlertServer interface.
type MockReadyNotify_AlertServer struct {
	ctrl     *gomock.Controller
	recorder *MockReadyNotify_AlertServerMockRecorder
}

// MockReadyNotify_AlertServerMockRecorder is the mock recorder for MockReadyNotify_AlertServer.
type MockReadyNotify_AlertServerMockRecorder struct {
	mock *MockReadyNotify_AlertServer
}

// NewMockReadyNotify_AlertServer creates a new mock instance.
func NewMockReadyNotify_AlertServer(ctrl *gomock.Controller) *MockReadyNotify_AlertServer {
	mock := &MockReadyNotify_AlertServer{ctrl: ctrl}
	mock.recorder = &MockReadyNotify_AlertServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadyNotify_AlertServer) EXPECT() *MockReadyNotify_AlertServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockReadyNotify_AlertServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReadyNotify_AlertServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReadyNotify_AlertServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockReadyNotify_AlertServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReadyNotify_AlertServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReadyNotify_AlertServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockReadyNotify_AlertServer) Send(arg0 *readynotify.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReadyNotify_AlertServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReadyNotify_AlertServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockReadyNotify_AlertServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockReadyNotify_AlertServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockReadyNotify_AlertServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockReadyNotify_AlertServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReadyNotify_AlertServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReadyNotify_AlertServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockReadyNotify_AlertServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockReadyNotify_AlertServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockReadyNotify_AlertServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockReadyNotify_AlertServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockReadyNotify_AlertServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockReadyNotify_AlertServer)(nil).SetTrailer), arg0)
}
