// Code generated by MockGen. DO NOT EDIT.
// Source: installapp/installapp.pb.go

// Package mock_installapp is a generated GoMock package.
package mock_installapp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	installapp "github.com/open-ness/EMCO/src/rsync/pkg/grpc/installapp"
	grpc "google.golang.org/grpc"
)

// MockInstallappClient is a mock of InstallappClient interface.
type MockInstallappClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstallappClientMockRecorder
}

// MockInstallappClientMockRecorder is the mock recorder for MockInstallappClient.
type MockInstallappClientMockRecorder struct {
	mock *MockInstallappClient
}

// NewMockInstallappClient creates a new mock instance.
func NewMockInstallappClient(ctrl *gomock.Controller) *MockInstallappClient {
	mock := &MockInstallappClient{ctrl: ctrl}
	mock.recorder = &MockInstallappClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallappClient) EXPECT() *MockInstallappClientMockRecorder {
	return m.recorder
}

// InstallApp mocks base method.
func (m *MockInstallappClient) InstallApp(ctx context.Context, in *installapp.InstallAppRequest, opts ...grpc.CallOption) (*installapp.InstallAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallApp", varargs...)
	ret0, _ := ret[0].(*installapp.InstallAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallApp indicates an expected call of InstallApp.
func (mr *MockInstallappClientMockRecorder) InstallApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallApp", reflect.TypeOf((*MockInstallappClient)(nil).InstallApp), varargs...)
}

// ReadAppContext mocks base method.
func (m *MockInstallappClient) ReadAppContext(ctx context.Context, in *installapp.ReadAppContextRequest, opts ...grpc.CallOption) (*installapp.ReadAppContextResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadAppContext", varargs...)
	ret0, _ := ret[0].(*installapp.ReadAppContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAppContext indicates an expected call of ReadAppContext.
func (mr *MockInstallappClientMockRecorder) ReadAppContext(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAppContext", reflect.TypeOf((*MockInstallappClient)(nil).ReadAppContext), varargs...)
}

// UninstallApp mocks base method.
func (m *MockInstallappClient) UninstallApp(ctx context.Context, in *installapp.UninstallAppRequest, opts ...grpc.CallOption) (*installapp.UninstallAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UninstallApp", varargs...)
	ret0, _ := ret[0].(*installapp.UninstallAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallApp indicates an expected call of UninstallApp.
func (mr *MockInstallappClientMockRecorder) UninstallApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallApp", reflect.TypeOf((*MockInstallappClient)(nil).UninstallApp), varargs...)
}

// MockInstallappServer is a mock of InstallappServer interface.
type MockInstallappServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstallappServerMockRecorder
}

// MockInstallappServerMockRecorder is the mock recorder for MockInstallappServer.
type MockInstallappServerMockRecorder struct {
	mock *MockInstallappServer
}

// NewMockInstallappServer creates a new mock instance.
func NewMockInstallappServer(ctrl *gomock.Controller) *MockInstallappServer {
	mock := &MockInstallappServer{ctrl: ctrl}
	mock.recorder = &MockInstallappServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallappServer) EXPECT() *MockInstallappServerMockRecorder {
	return m.recorder
}

// InstallApp mocks base method.
func (m *MockInstallappServer) InstallApp(arg0 context.Context, arg1 *installapp.InstallAppRequest) (*installapp.InstallAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallApp", arg0, arg1)
	ret0, _ := ret[0].(*installapp.InstallAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallApp indicates an expected call of InstallApp.
func (mr *MockInstallappServerMockRecorder) InstallApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallApp", reflect.TypeOf((*MockInstallappServer)(nil).InstallApp), arg0, arg1)
}

// ReadAppContext mocks base method.
func (m *MockInstallappServer) ReadAppContext(arg0 context.Context, arg1 *installapp.ReadAppContextRequest) (*installapp.ReadAppContextResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAppContext", arg0, arg1)
	ret0, _ := ret[0].(*installapp.ReadAppContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAppContext indicates an expected call of ReadAppContext.
func (mr *MockInstallappServerMockRecorder) ReadAppContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAppContext", reflect.TypeOf((*MockInstallappServer)(nil).ReadAppContext), arg0, arg1)
}

// UninstallApp mocks base method.
func (m *MockInstallappServer) UninstallApp(arg0 context.Context, arg1 *installapp.UninstallAppRequest) (*installapp.UninstallAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallApp", arg0, arg1)
	ret0, _ := ret[0].(*installapp.UninstallAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallApp indicates an expected call of UninstallApp.
func (mr *MockInstallappServerMockRecorder) UninstallApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallApp", reflect.TypeOf((*MockInstallappServer)(nil).UninstallApp), arg0, arg1)
}
